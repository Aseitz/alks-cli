#!/usr/bin/env node
'use strict';

process.title = 'ALKS';

var program = require('commander'),
    clc     = require('cli-color'),
    _       = require('underscore'),
    async   = require('async'),
    prompt  = require('prompt'),
    request = require('request'),
    config  = require('../package.json'),
    utils   = require('./utils');

program
    .version(config.version)
    .description('creates a new session')
    .option('-p, --password [password]', 'my password')
    .option('-d, --duration [hours]', 'duration of session [hours]', 2)
    .option('-e, --setenv', 'export values as environment variables')
    .parse(process.argv);

var durationValues = [ 2, 6, 12, 18, 24, 36 ];

var password = program.password,
    duration = parseInt(program.duration),
    setenv   = _.isBoolean(program.setenv);

if(!_.contains(durationValues, duration)){
    utils.errorAndExit('The duration provided ('+duration+') is not in the allowed values: ' + durationValues.join(', '));
}

async.waterfall([
    /// first handle the password
    function(callback){
        // if its empty then prompt them
        if(_.isEmpty(password)){
            prompt.start();
            prompt.message = '';
            prompt.get([{
                name: 'password',
                description: 'Password for ' + utils.getConfig().ALKS_USERID,
                hidden: true,
                required: true
            }], function(err, result){
                if(err){
                    callback(err);
                }
                else{
                    callback(null, result.password);
                }
            });
        }
        // otherwise just return the provided password
        else{
            callback(null, password);
        }
    },
    // now call the ALKS API
    function(password, callback){
        var payload = _.extend(
            {
                password: password,
                sessionTime: duration
            },
            utils.getConfigForRequest()
        );

        request({
            url: utils.getConfig().ALKS_SERVER + '/getKeys/',
            method: 'POST',
            json: payload
        }, function(err, results){
            if(err){
                return callback(err);
            }
            else if(results.statusCode !== 200){
                return callback(results.body.statusMessage);
            }
            
            callback(null, {
                access_key:    results.body.accessKey,
                secret_key:    results.body.secretKey,
                session_token: results.body.sessionToken
            });
        });
    },
    // now deal with the session data
    function(sessionData, callback){
        var expires = new Date();
        expires.setHours(expires.getHours()+duration);
        console.error(clc.white('Your AWS session data has been generated and expires ' + expires));
        
        if(setenv){
            var sb = [];
            sb.push('export AWS_ACCESS_KEY_ID=');
            sb.push(sessionData.access_key);
            sb.push(' && export AWS_SECRET_ACCESS_KEY=');
            sb.push(sessionData.secret_key);
            sb.push(' && export AWS_SESSION_TOKEN=');
            sb.push(sessionData.session_token);
            console.log(sb.join(''));
        }
        else{
            console.log(JSON.stringify(sessionData, null, 4));
        }
    }
], function(err, data){
    if(err){
        utils.errorAndExit(err);
    }
});