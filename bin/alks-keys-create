#!/usr/bin/env node
'use strict';

process.title = 'ALKS';

var program   = require('commander'),
    clc       = require('cli-color'),
    _         = require('underscore'),
    async     = require('async'),
    alks      = require('alks-node'),
    config    = require('../package.json'),
    Developer = require('../lib/developer'),
    keys      = require('../lib/keys'),
    utils     = require('../lib/utils');

var durationValues = alks.getDurations(),
    outputValues   = utils.getOutputValues(),
    logger         = 'keys-create';

program
    .version(config.version)
    .description('creates a new key')
    .option('-p, --password [password]', 'my password')
    .option('-d, --duration [hours]', 'duration of session (' + durationValues.join(', ') + '), default: ' + durationValues[0], durationValues[0])
    .option('-o, --output [format]', 'output format (' + outputValues.join(', ') + '), default: ' + outputValues[0], outputValues[0])
    .option('-n, --namedProfile [profile]', 'if output is set to creds, use this profile, default: default')
    .option('-f, --force', 'if output is set to creds, force overwriting of AWS credentials')
    .option('-v, --verbose', 'be verbose')
    .parse(process.argv);

var duration = parseInt(program.duration),
    output   = program.output;

if(!_.contains(durationValues, duration)){
    utils.errorAndExit('The duration provided ('+duration+') is not in the allowed values: ' + durationValues.join(', '));
}

if(!_.contains(outputValues, output)){
    utils.errorAndExit('The output provided ('+output+') is not in the allowed values: ' + outputValues.join(', '));
}

async.waterfall([
    // check to be sure were configured
    function(callback){
        Developer.ensureConfigured(callback);
    },
    // get developer
    function(callback){
        utils.log(program, logger, 'getting developer');
        Developer.getDeveloper(callback);
    },
    // get password
    function(developer, callback){
        utils.log(program, logger, 'getting password');
        Developer.getPassword(program, function(err, password){
            callback(err, developer, password);
        });
    },
    // now call the ALKS API
    function(developer, password, callback){
        utils.log(program, logger, 'calling api');
        alks.createKey(developer, password, duration, callback);
    },
    // now deal with the session data
    function(key, developer, password, callback){
        // calculate expiration
        console.error(clc.white([ 'AWS session data generated for "', developer.alksAccount,
                                 '" and expires ', key.expires.calendar() ].join('')));

        // store session data in DB
        utils.log(program, logger, 'saving key in DB');
        keys.addKey(key.accessKey, key.secretKey, key.sessionToken,
                    key.alksAccount, key.alksRole, key.expires.toDate(), password, false);

        callback(null, key);
    }
], function(err, data){
    if(err){
        return utils.errorAndExit(err);
    }

    console.log(keys.getKeyOutput(output, data, program.namedProfile, program.force));

    utils.deprecationWarning('alks keys create is deprecated. Please use alks sessions open.');
    utils.log(program, logger, 'checking for updates');
    utils.checkForUpdate();
    Developer.trackActivity(logger);
});