#!/usr/bin/env node
'use strict';

process.title = 'ALKS';

var program = require('commander'),
    clc     = require('cli-color'),
    _       = require('underscore'),
    async   = require('async'),
    moment  = require('moment'),
    config  = require('../package.json'),
    Account = require('../lib/account'),
    keys    = require('../lib/keys'),
    alks    = require('../lib/alks-api'),
    utils   = require('../lib/utils');

var durationValues = alks.getDurations(),
    outputValues   = utils.getOutputValues();

program
    .version(config.version)
    .description('creates a new key')
    .option('-p, --password [password]', 'my password (required if not stored)')
    .option('-d, --duration [hours]', 'duration of session (' + durationValues.join(', ') + '), default: ' + durationValues[0], durationValues[0])
    .option('-o, --output [format]', 'output format (' + outputValues.join(', ') + '), default: ' + outputValues[0], outputValues[0])
    .option('-n, --namedProfile [profile]', 'if output is set to creds, use this profile, default: default')
    .option('-f, --force', 'if output is set to creds, force overwriting of AWS credentials')
    .parse(process.argv);

var duration = parseInt(program.duration),
    output   = program.output;

if(!_.contains(durationValues, duration)){
    utils.errorAndExit('The duration provided ('+duration+') is not in the allowed values: ' + durationValues.join(', '));
}

if(!_.contains(outputValues, output)){
    utils.errorAndExit('The output provided ('+output+') is not in the allowed values: ' + outputValues.join(', '));
}

async.waterfall([
    // check to be sure were configured
    function(callback){
        Account.ensureConfigured(callback);
    },
    // get account
    function(callback){
        Account.getAccount(callback);
    },
    // get password
    function(account, callback){
        Account.getPassword(program, function(err, password){
            callback(err, account, password);
        });
    },
    // now call the ALKS API
    function(account, password, callback){
        alks.createKey(account, password, duration, callback);
    },
    // now deal with the session data
    function(sessionData, account, password, callback){
        // calculate expiration
        var expires = moment().add(duration, 'hours');
        console.error(clc.white('AWS session data generated for "' + account.alksAccount + '" and expires ' + expires.calendar()));

        // store session data in DB
        keys.addKey(sessionData.accessKey, sessionData.secretKey,
                    sessionData.sessionToken, sessionData.consoleURL,
                    account.alksAccount, account.alksRole,
                    expires.toDate(), password);

        callback(null, sessionData);
    }
], function(err, data){
    if(err){
        return utils.errorAndExit(err);
    }

    console.log(keys.getKeyOutput(output, data, program.namedProfile, program.force));

    utils.checkForUpdate();
});