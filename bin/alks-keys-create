#!/usr/bin/env node
'use strict';

process.title = 'ALKS';

var program = require('commander'),
    clc     = require('cli-color'),
    _       = require('underscore'),
    async   = require('async'),
    prompt  = require('prompt'),
    request = require('request'),
    moment  = require('moment'),
    config  = require('../package.json'),
    account = require('../lib/account'),
    keys    = require('../lib/keys'),
    utils   = require('../lib/utils');

var durationValues = [ 2, 6, 12, 18, 24, 36 ],
    outputValues   = utils.getOutputValues();

program
    .version(config.version)
    .description('creates a new session')
    .option('-p, --password [password]', 'my password')
    .option('-d, --duration [hours]', 'duration of session (' + durationValues.join(', ') + ')', durationValues[0])
    .option('-o, --output [format]', 'output format (' + outputValues.join(', ') + ')', outputValues[0])
    .option('-f, --force', 'if output is set to creds, force overwriting of default AWS credentials')
    .parse(process.argv);

var duration = parseInt(program.duration),
    output   = program.output;

if(!_.contains(durationValues, duration)){
    utils.errorAndExit('The duration provided ('+duration+') is not in the allowed values: ' + durationValues.join(', '));
}

if(!_.contains(outputValues, output)){
    utils.errorAndExit('The output provided ('+output+') is not in the allowed values: ' + outputValues.join(', '));
}

async.waterfall([
    /// first handle the password
    function(callback){
        account.getPassword(program, callback);
    },
    // now call the ALKS API
    function(password, callback){
        var payload = _.extend(
            {
                password: password,
                sessionTime: duration
            },
            utils.getConfigForRequest()
        );

        request({
            url: utils.getConfig().ALKS_SERVER + '/getKeys/',
            method: 'POST',
            json: payload
        }, function(err, results){
            if(err){
                return callback(err);
            }
            else if(results.statusCode !== 200){
                return callback(results.body.statusMessage);
            }
            
            callback(null, {
                accessKey:    results.body.accessKey,
                secretKey:    results.body.secretKey,
                sessionToken: results.body.sessionToken
            }, password);
        });
    },
    // now deal with the session data
    function(sessionData, password, callback){
        // calculate expiration
        var expires = moment().add(duration, 'hours');
        console.error(clc.white('Your AWS session data has been generated and expires ' + expires.calendar()));
        
        // store session data in DB
        keys.addKey(sessionData.accessKey, sessionData.secretKey, sessionData.sessionToken, expires.toDate(), password);

        // now output the key
        console.log(keys.getKeyOutput(output, sessionData, program.force));
    }
], function(err, data){
    if(err){
        utils.errorAndExit(err);
    }
});