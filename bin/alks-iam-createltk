#!/usr/bin/env node
'use strict';

process.title = 'ALKS';

var program   = require('commander'),
    _         = require('underscore'),
    clc       = require('cli-color'),
    alks      = require('alks-node'),
    Iam       = require('../lib/iam'),
    utils     = require('../lib/utils'),
    Developer = require('../lib/developer'),
    config    = require('../package.json');

var logger       = 'iam-createltk';

program
    .version(config.version)
    .description('creates a new IAM Longterm Key')
    .option('-n, --iamusername [iamUsername]', 'the name of the iam user associated with the LTK')
    .option('-a, --account [alksAccount]', 'alks account to use')
    .option('-r, --role [alksRole]', 'alks role to use')
    .option('-F, --favorites', 'filters favorite accounts')
    .option('-v, --verbose', 'be verbose')
    .parse(process.argv);

var iamUsername = program.iamusername,
    alksAccount = program.account,
    alksRole    = program.role,
    filterFaves = program.favorites || false;

utils.log(program, logger, 'validating iam user name: ' + iamUsername);
if(_.isEmpty(iamUsername)){
    utils.errorAndExit('The IAM username is required.');
}

if(!_.isUndefined(alksAccount) && _.isUndefined(alksRole)){
    utils.log(program, logger, 'trying to extract role from account');
    alksRole = utils.tryToExtractRole(alksAccount);
}

Iam.getIAMAccount(program, logger, alksAccount, alksRole, filterFaves, function(err, developer, password, alksAccount, alksRole){
    if(err){
        return utils.errorAndExit(err);
    }

    // create the LTK
    var data = _.extend({}, developer);
    data.alksAccount = alksAccount;
    data.alksRole = alksRole;
    utils.log(program, logger, 'calling api to create ltk: ' + iamUsername);

    alks.createLongTermKey(data, password, iamUsername, { debug: program.verbose, ua: utils.getUA() }, function(err, data){
        if(err){
            return utils.errorAndExit(err);
        }

        console.error(clc.white(['LTK created for IAM User: ', iamUsername, ' was created with the ARN: '].join('')) + clc.white.underline(data.iamUserArn));
        console.error(clc.white(['LTK Access Key: '].join('')) + clc.white.underline(data.accessKey));
        console.error(clc.white(['LTK Secret Key: '].join('')) + clc.white.underline(data.secretKey));

        utils.log(program, logger, 'checking for updates');
        utils.checkForUpdate();
        Developer.trackActivity(logger);
    });
});