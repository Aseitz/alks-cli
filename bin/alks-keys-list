#!/usr/bin/env node
'use strict';

process.title = 'ALKS';

var program = require('commander'),
    clc     = require('cli-color'),
    _       = require('underscore'),
    Table   = require('cli-table'),
    moment  = require('moment'),
    prompt  = require('prompt'),
    async   = require('async'),
    config  = require('../package.json'),
    utils   = require('../lib/utils'),
    Account = require('../lib/account'),
    keys    = require('../lib/keys');

program
    .version(config.version)
    .description('list previous keys')
    .option('-p, --password [password]', 'my password')
    .option('-o, --output [format]', 'output format (' + utils.getOutputValues().join(', ') + '), default: ' + utils.getOutputValues()[0], utils.getOutputValues()[0])
    .option('-n, --namedProfile [profile]', 'if output is set to creds, use this profile, default: default')
    .option('-f, --force', 'if output is set to creds, force overwriting of AWS credentials')
    .parse(process.argv);

if(!_.contains(utils.getOutputValues(), program.output)){
    utils.errorAndExit('The output provided ('+program.output+') is not in the allowed values: ' + utils.getOutputValues().join(', '));
}

async.waterfall([
    // check to be sure were configured
    function(callback){
        Account.ensureConfigured(callback);
    },
    // get the password
    function(callback){
        Account.getPassword(program, callback);
    },
    // now retrieve the keys
    function(password, callback){
        keys.getKeys(password, callback);
    },
    // it's dangerous to go alone, choose a key...
    function(foundKeys, callback){
        var table = new Table({
            head: [
                clc.white.bold('#'),
                clc.white.bold('Access Key'),
                clc.white.bold('Secret Key'),
                clc.white.bold('Expires'),
                clc.white.bold('Created')
            ],
            colWidths: [5, 25, 45, 25, 25]
        });

        _.each(foundKeys, function(keydata, i){
            table.push([ i+1, utils.obfuscate(keydata.accessKey), utils.obfuscate(keydata.secretKey), moment(keydata.expires).calendar(), moment(keydata.meta.created).fromNow() ])
        });

        console.error(clc.white.underline.bold('\nAvailable Keys'));
        console.error(clc.white(table.toString()));

        if(foundKeys.length){
            prompt.message = prompt.delimiter = '';
            prompt.start();

            var promptKey = clc.yellow('Use (1-' + foundKeys.length + ')?');
            prompt.get([promptKey], function(err, result){
                var index;
                try{
                    index = parseInt(result[promptKey]) - 1;
                } catch(e){}

                if(isNaN(index) || index > foundKeys.length - 1){
                    return utils.errorAndExit('Invalid value received.');
                }

                callback(null, foundKeys, index);
            });
        }        
    }
], function(err, foundKeys, selectedIndex){
    if(err){
        return utils.errorAndExit(err);
    }

    console.log(keys.getKeyOutput(program.output, foundKeys[selectedIndex], program.namedProfile, program.force));

    utils.checkForUpdate();
});