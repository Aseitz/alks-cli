#!/usr/bin/env node
'use strict';

process.title = 'ALKS';

var program   = require('commander'),
    clc       = require('cli-color'),
    prompt    = require('prompt'),
    inquirer  = require('inquirer'),
    async     = require('async'),
    _         = require('underscore'),
    config    = require('../package.json'),
    utils     = require('../lib/utils'),
    Developer = require('../lib/developer'),
    alks      = require('../lib/alks-api');

program
    .version(config.version)
    .description('configures developer')
    .option('-v, --verbose', 'be verbose')
    .parse(process.argv);

var logger = 'dev-config';

function getPrompt(field, data, text, validator, callback){
    var promptConfig = {
        name: field,
        description: text,
        required: true
    };

    if(!_.isEmpty(data[field])){
        promptConfig.default = data[field];
    }

    if(_.isFunction(validator)){
        promptConfig.conform = validator;
    }

    prompt.start();
    prompt.message = '';
    prompt.get([ promptConfig ], function(err, result){
        if(err){
            callback(err);
        }
        else{
            callback(null, result[field]);
        }
    });
}

async.waterfall([
    // check for an exisiting developer
    function(callback){
        utils.log(program, logger, 'getting developer');
        Developer.getDeveloper(callback);
    },
    // ask for server
    function(previousData, callback){
        getPrompt('server', previousData, 'ALKS server', utils.isURL, function(err, server){
            callback(err, previousData, server);
        });
    },
    // ask for username
    function(previousData, server, callback){
        getPrompt('userid', previousData, 'Network Username', null, function(err, userid){
            callback(err, previousData, server, userid);
        });
    },
    // ask for password
    function(previousData, server, userid, callback){
        Developer.getPasswordFromPrompt(function(err, password){
            callback(err, previousData, server, userid, password);
        }, 'Network Password');
    },
    // ask if they want to save password
    function(previousData, server, userid, password, callback){
        inquirer.prompt([
            {
                type: 'list',
                name: 'savePassword',
                message: 'Save password',
                choices: [ 'Yes', 'No' ]
            }
        ]).then(function(answers){
            callback(null, previousData, server, userid, password, answers.savePassword);
        });
    },
    // request list of accounts from ALKS
    function(previousData, server, userid, password, savePassword, callback){
        utils.log(program, logger, 'getting alks accounts');
        alks.getAccounts(server, userid, password, function(err, accounts){
            callback(err, server, userid, password, savePassword, accounts);
        })
    },
    // ask which ALKS account/role to use
    function(server, userid, password, savePassword, alksAccounts, callback){
        inquirer.prompt([
            {
                type: 'list',
                name: 'alksAccount',
                message: 'Please select an ALKS account/role',
                choices: alksAccounts
            }
        ]).then(function(answers){
            var data = answers.alksAccount.split(alks.getAccountSelectorDelimiter()),
                alksAccount = data[0],
                alksRole = data[1];

            callback(null, server, userid, password, savePassword, alksAccount, alksRole);
        });
    }
], function(err, server, userid, password, savePassword, alksAccount, alksRole){
    // did any of our steps have issues?
    if(err){
        return utils.errorAndExit('Error configuring developer: ' + err.message);
    }

    var developerPayload = {
        server: server,
        userid: userid,
        password: password,
        savePassword: savePassword,
        alksAccount: alksAccount,
        alksRole: alksRole
    };

    // create developer
    utils.log(program, logger, 'saving developer');
    Developer.saveDeveloper(developerPayload, function(err){
        if(err){
            utils.log(program, logger, 'error saving! ' + err.message);
            console.error(clc.red.bold('Error saving developer!'));
        }
        else{
            console.error(clc.white('Developer saved!'));
        }
    });

    utils.log(program, logger, 'checking for update');
    utils.checkForUpdate();
});