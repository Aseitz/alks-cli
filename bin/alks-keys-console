#!/usr/bin/env node
'use strict';

process.title = 'ALKS';

var program = require('commander'),
    clc     = require('cli-color'),
    _       = require('underscore'),
    Table   = require('cli-table2'),
    moment  = require('moment'),
    prompt  = require('prompt'),
    async   = require('async'),
    opn     = require('opn'),
    config  = require('../package.json'),
    utils   = require('../lib/utils'),
    Account = require('../lib/account'),
    keys    = require('../lib/keys');

program
    .version(config.version)
    .description('open an AWS console in your browser')
    .option('-o, --openWith [appName]', 'open in a different app (optional)')
    .option('-p, --password [password]', 'my password')
    .parse(process.argv);

async.waterfall([
    // check to be sure were configured
    function(callback){
        Account.ensureConfigured(callback);
    },
    // get the password
    function(callback){
        Account.getPassword(program, callback);
    },
    // now retrieve the keys
    function(password, callback){
        keys.getKeys(password, callback);
    },
    // it's dangerous to go alone, choose a key...
    function(foundKeys, callback){
        var table = new Table({
            head: [
                clc.white.bold('#'),
                clc.white.bold('Access Key'),
                clc.white.bold('Secret Key'),
                clc.white.bold('Expires'),
                clc.white.bold('Created')
            ],
            colWidths: [5, 25, 25, 25, 25]
        });


        var groupedKeys = _.groupBy(foundKeys, 'alksAccount'),
            i           = 0;

        _.each(groupedKeys, function(keys, alksAccount){
            table.push([ { colSpan: 5, content: clc.yellow.bold('ALKS Account: ' + alksAccount) } ]);

            _.each(keys, function(keydata){
                table.push([ (i++)+1,
                             utils.obfuscate(keydata.accessKey),
                             utils.obfuscate(keydata.secretKey),
                             moment(keydata.expires).calendar(),
                             moment(keydata.meta.created).fromNow()
                           ]);
            });
        });


        if(foundKeys.length){
            console.error(clc.white.underline.bold('\nPlease choose key to open the AWS console for'));
            console.error(clc.white(table.toString()));

            prompt.message = prompt.delimiter = '';
            prompt.start();

            var promptKey = clc.yellow('Use (1-' + i + ')?');
            prompt.get([promptKey], function(err, result){
                var index;
                try{
                    index = parseInt(result[promptKey]) - 1;
                } catch(e){}

                if(isNaN(index) || index > foundKeys.length - 1){
                    return utils.errorAndExit('Invalid value received.');
                }

                i = 0;
                _.each(groupedKeys, function(keys, alksAccount){
                    _.each(keys, function(keydata){
                        if(i++ === index){
                            callback(null, keydata);
                        }
                    });
                });
            });
        }
        else{
            console.error(clc.white('No existing keys found, please run "alks keys create"'));
        }
    }
], function(err, selectedKey){
    if(err){
        return utils.errorAndExit(err);
    }
    if(!_.isEmpty(selectedKey.consoleURL)){
        var opts = !_.isEmpty(program.openWith) ? { app: program.openWith } : {};

        opn(selectedKey.consoleURL, opts);
    }
    else{
        console.error(clc.red('The selected key does not have a console URL.'));
    }

    utils.checkForUpdate();
    process.exit(1); // needed for opn()
});