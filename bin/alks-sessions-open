#!/usr/bin/env node
'use strict';

process.title = 'ALKS';

var program  = require('commander'),
    clc      = require('cli-color'),
    async    = require('async'),
    _        = require('underscore'),
    inquirer = require('inquirer'),
    config   = require('../package.json'),
    utils    = require('../lib/utils'),
    keys     = require('../lib/keys'),
    Account  = require('../lib/account'),
    alks     = require('../lib/alks-api');

var outputValues = utils.getOutputValues();

program
    .version(config.version)
    .description('creates or resumes a session')
    .option('-p, --password [password]', 'my password (required if not stored)')
    .option('-o, --output [format]', 'output format (' + outputValues.join(', ') + '), default: ' + outputValues[0], outputValues[0])
    .option('-n, --namedProfile [profile]', 'if output is set to creds, use this profile, default: default')
    .option('-f, --force', 'if output is set to creds, force overwriting of AWS credentials')
    .parse(process.argv);

var output = program.output;

// TODO: how to make this not require input? dont want to have to pass that long-ass ALKS account string in
async.waterfall([
    // check to be sure were configured
    function(callback){
        Account.ensureConfigured(callback);
    },
    // get alks account
    function(callback){
        Account.getALKSAccount(program, callback);
    },
    // now retrieve existing keys
    function(alksAccount, callback){
        keys.getKeys(alksAccount.password, function(err, keys){
            callback(null, alksAccount, keys);
        });
    },
    // look for existing session
    function(alksAccount, keys, callback){
        if(keys.length){
            // filter keys for the selected alks account/role
            var keyCriteria = { alksAccount: alksAccount.account, alksRole: alksAccount.role },
            // filter, sort by expiration, grab last key to expire
                selectedKey = _.last(_.sortBy(_.where(keys, keyCriteria), 'expires'));

            if(selectedKey) return callback(null, selectedKey);
        }

        console.log('TODO: gen key');
        // alks.createKey(account, password, duration, callback);
    }
], function(err, data){
    if(err){
        return utils.errorAndExit(err);
    }

    console.log(keys.getKeyOutput(output, data, program.namedProfile, program.force));

    utils.checkForUpdate();
});