#!/usr/bin/env node
'use strict';

process.title = 'ALKS';

var program    = require('commander'),
    clc        = require('cli-color'),
    _          = require('underscore'),
    config     = require('../package.json'),
    utils      = require('../lib/utils'),
    Keys       = require('../lib/keys'),
    Developer  = require('../lib/developer'),
    Sessions   = require('../lib/sessions'),
    Iam        = require('../lib/iam');

var outputValues = utils.getOutputValues();

program
    .version(config.version)
    .description('creates or resumes a session')
    .option('-a, --account [alksAccount]', 'alks account to use')
    .option('-r, --role [alksRole]', 'alks role to use')
    .option('-i, --iam', 'create an IAM session')
    .option('-p, --password [password]', 'my password')
    .option('-o, --output [format]', 'output format (' + outputValues.join(', ') + '), default: ' + outputValues[0], outputValues[0])
    .option('-n, --namedProfile [profile]', 'if output is set to creds, use this profile, default: default')
    .option('-f, --force', 'if output is set to creds, force overwriting of AWS credentials')
    .option('-N, --newSession', 'forces a new session to be generated')
    .option('-v, --verbose', 'be verbose')
    .parse(process.argv);

var alksAccount       = program.account,
    alksRole          = program.role,
    forceNewSession   = program.newSession,
    hasAlksAcctRole   = !_.isEmpty(alksAccount) && !_.isEmpty(alksRole),
    output            = program.output,
    logger            = 'sessions-open';

var onComplete = function(err, key){
    if(err){
        return utils.errorAndExit(err);
    }

    console.error('');
    console.log(Keys.getKeyOutput(output, key, program.namedProfile, program.force));

    utils.log(program, logger, 'checking for updates');
    utils.checkForUpdate();
    Developer.trackActivity(logger);
}

if(_.isUndefined(program.iam)){
    Sessions.getSessionKey(program, logger, hasAlksAcctRole, alksAccount, alksRole, false, onComplete);
}
else{
    Iam.getIAMKey(program, logger, hasAlksAcctRole, alksAccount, alksRole, onComplete);
}