#!/usr/bin/env node
'use strict';

process.title = 'ALKS';

var program  = require('commander'),
    clc      = require('cli-color'),
    async    = require('async'),
    _        = require('underscore'),
    inquirer = require('inquirer'),
    moment   = require('moment'),
    config   = require('../package.json'),
    utils    = require('../lib/utils'),
    keys     = require('../lib/keys'),
    Account  = require('../lib/account'),
    alks     = require('../lib/alks-api');

var outputValues = utils.getOutputValues();

program
    .version(config.version)
    .description('creates or resumes a session')
    .option('-p, --password [password]', 'my password (required if not stored)')
    .option('-o, --output [format]', 'output format (' + outputValues.join(', ') + '), default: ' + outputValues[0], outputValues[0])
    .option('-n, --namedProfile [profile]', 'if output is set to creds, use this profile, default: default')
    .option('-f, --force', 'if output is set to creds, force overwriting of AWS credentials')
    .parse(process.argv);

var alksAccountId    = program.args[0],
    alksAccountIdInt = parseInt(alksAccountId),
    output           = program.output;

if(program.args[0] && (isNaN(alksAccountIdInt) || alksAccountIdInt < 1)){
    utils.errorAndExit('ALKS Account ID should be a positive integer.');
}
else if(!isNaN(alksAccountIdInt)){
    alksAccountId = alksAccountIdInt - 1;
}
else if(isNaN(alksAccountIdInt)){
    alksAccountId = null;
}

async.waterfall([
    // check to be sure were configured
    function(callback){
        Account.ensureConfigured(callback);
    },
    // get alks account
    function(callback){
        Account.getALKSAccount(program, alksAccountId, callback);
    },
    // now retrieve existing keys
    function(alksAccount, callback){
        keys.getKeys(alksAccount.password, function(err, keys){
            callback(null, alksAccount, keys);
        });
    },
    // look for existing session
    function(alksAccount, existingKeys, callback){
        if(existingKeys.length){
            // filter keys for the selected alks account/role
            var keyCriteria = { alksAccount: alksAccount.alksAccount, alksRole: alksAccount.alksRole },
            // filter, sort by expiration, grab last key to expire
                selectedKey = _.last(_.sortBy(_.where(existingKeys, keyCriteria), 'expires'));

            if(selectedKey){
                console.error(clc.white.underline([ 'Resuming existing session in', alksAccount.alksAccount,
                                          alksAccount.alksRole ].join(' ')));
                return callback(null, selectedKey);
            }
        }

        var duration = _.last(alks.getDurations()),
            expires  = moment().add(duration, 'hours');

        console.error(clc.white.underline([ 'Creating new session in', alksAccount.alksAccount, alksAccount.alksRole ].join(' ')));

        // generate a new key/session
        alks.createKey(alksAccount, alksAccount.password, duration, function(err, key){
            // store session data in DB
            keys.addKey(key.accessKey, key.secretKey, key.sessionToken, key.consoleURL,
                        key.alksAccount, key.alksRole, expires.toDate(), alksAccount.password);


            callback(err, key);
        });
    }
], function(err, data){
    if(err){
        return utils.errorAndExit(err);
    }

    console.error('');
    console.log(keys.getKeyOutput(output, data, program.namedProfile, program.force));

    utils.checkForUpdate();
});